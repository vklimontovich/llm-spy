// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model AuthKey {
  id          String     @id @default(cuid())
  key         String     @unique
  hashed      Boolean    @default(false)
  workspaceId String?    @map("workspace_id")
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  deletedAt   DateTime?
  createdAt   DateTime   @default(now())

  @@index([key])
  @@index([workspaceId])
  @@map("auth_keys")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  provider       String?
  externalUserId String?         @map("external_user_id")
  workspaces     UserWorkspace[]

  @@unique([provider, externalUserId])
  @@map("users")
}

model Workspace {
  id        String          @id @default(cuid())
  slug      String          @unique
  name      String
  users     UserWorkspace[]
  upstreams Upstream[]
  responses Response[]
  authKeys  AuthKey[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("workspaces")
}

model UserWorkspace {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  workspaceId String    @map("workspace_id")
  role        String    @default("member")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())

  @@unique([userId, workspaceId])
  @@map("user_workspaces")
}

model Upstream {
  id              String         @id @default(cuid())
  name            String
  url             String?
  headers         Json?
  inputFormat     String         @default("auto") @map("input_format")
  outputFormat    String?        @map("output_format")
  keepAuthHeaders Boolean        @default(false) @map("keep_auth_headers")
  workspaceId     String?        @map("workspace_id")
  workspace       Workspace?     @relation(fields: [workspaceId], references: [id])
  deletedAt       DateTime?      @map("deleted_at")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt
  otelUpstreams   OtelUpstream[]
  responses       Response[]

  @@unique([name, workspaceId])
  @@map("upstreams")
}

model OtelUpstream {
  id         String   @id @default(cuid())
  url        String
  headers    Json?
  upstreamId String
  upstream   Upstream @relation(fields: [upstreamId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([upstreamId])
  @@map("otel_upstreams")
}

model Response {
  id              String     @id @default(cuid())
  url             String
  method          String
  status          Int        @default(200)
  requestBody     Bytes?
  responseBody    Bytes?
  requestHeaders  Json
  responseHeaders Json
  conversationId  String?    @map("conversation_id")
  sessionId       String?    @map("session_id")
  public          Boolean    @default(false)
  workspaceId     String?    @map("workspace_id")
  workspace       Workspace? @relation(fields: [workspaceId], references: [id])
  upstreamId      String?    @map("upstream_id")
  upstream        Upstream?  @relation(fields: [upstreamId], references: [id])
  provider        String?
  requestModel    String?    @map("request_model")
  responseModel   String?    @map("response_model")
  // Full provider-specific usage block (as returned by the API)
  usage           Json?
  durationMs      Int?       @map("duration_ms")
  pricing         Json?
  preview         Json?
  createdAt       DateTime   @default(now())

  @@index([conversationId])
  @@index([public])
  @@index([workspaceId])
  @@map("responses")
}
